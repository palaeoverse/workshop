{
  "hash": "5312327421fc6d9aa995f500e61a3989",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot2 Data Visualization Practical\"\nexecute:\n  echo: true\n  eval: true\n  freeze: auto\norder: 3\n---\n\n# Getting familiar with ggplot2\n\n[`ggplot2`](https://ggplot2.tidyverse.org/index.html) is designed around the \"grammar of graphics\". In most cases you start with `ggplot()` and then supply a dataset and \"aesthetic\" mappings (with `aes()`). You then add on individual layers (like `geom_point()` or `geom_histogram()`) to add the visualization(s) that you want. Let's first try making a scatterplot using some built-in data about car mileage (`mpg`). In this case, we'll plot the highway mileage with respect to the engine size (displacement). Note that in this case, instead of calling functions separately, we chain them together with the `+` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the ggplot2 package\nlibrary(ggplot2)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check out the mileage data\nhead(mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  <chr>        <chr> <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr> \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nYou'll notice that with just a couple of lines, we've already made a pretty nice visualization. `ggplot2` does most of the work for us once we specify our `x` and `y` variables. Let's go a step further and color the points by another variable (e.g., the class of the car). With `ggplot2`, all that requires is specifying another aesthetic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nNotice that `ggplot2` comes with its own default color scheme. I would strongly discourage you from using the default colors. Instead, we'll try out some of the accessible color palettes we talked about earlier. First, let's try one of the `viridis` color palettes. Since this palette is included in `ggplot2`, all we need to do is add the proper \"scale\" to our `ggplot()` call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() +\n  scale_color_viridis_d()\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nHmm...with this many colors, it becomes a little hard to distinguish between the colors with this color palette. Let's try one of the [brewer color palettes](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() +\n  scale_color_brewer(palette = \"Set2\")\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nOutside of color, there are many other [aspects of the graph](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html) that we can modify using \"scale\"s. For example, we can modify the x and y axes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() +\n  scale_color_brewer(name = \"Vehicle Class\", palette = \"Set1\") +\n  scale_x_continuous(name = \"Engine Displacement (l)\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\")\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Theming\n\nThe last basic thing you might want to do with `ggplot2` is modify the style of the visualization. This is extremely customizable, but the first place to start is with a [built-in theme](https://ggplot2.tidyverse.org/reference/ggtheme.html). I personally prefer the classic theme:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() +\n  scale_color_brewer(name = \"Vehicle Class\", palette = \"Set1\") +\n  scale_x_continuous(name = \"Engine Displacement (l)\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nUsing this built-in theme has changed many visual aspects of the graph, including changing the plot background color, adding axis lines, and removing the internal grid lines. If you look very closely, however, the axis tick labels are still a slight grey. We can use the `theme()` function to further customize the appearance and change this. In this case, we'll make the axis text elements have a black color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point() +\n  scale_color_brewer(name = \"Vehicle Class\", palette = \"Set1\") +\n  scale_x_continuous(name = \"Engine Displacement (l)\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAnd there we have it! With just 7 lines we've created what I would say is a publication quality graph! `ggplot` does a lot of the tedious work for you, giving you time to focus on the more important aspects, such as labeling and color. Admittedly, I've spent a LOT of time on these aspects in the past...\n\nMore information about all of the hierarchical theme components that you can customize is available [here](https://ggplot2.tidyverse.org/reference/theme.html). In order to change many of these components, you need to use theme elements like we did above with `element_text()`. That and other theme elements are documented [here](https://ggplot2.tidyverse.org/reference/element.html).\n\n# More complex features\n\n## Other layers\n\nThere are many other [types of plots](https://ggplot2.tidyverse.org/reference/#layers) that we can make with `ggplot2`.\n\n### Histograms\n\nWe can visualize the density of values for a single variable with a histogram:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = hwy)) + \n  geom_histogram() +\n  scale_x_continuous(name = \"Highway Mileage (mpg)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNote how histograms don't require a y-axis aesthetic by default. The counts are tabulated for you.\n\n### Boxplots and Violin Plotss\n\nWe can visualize the density of values for a single variable across a discrete variable with boxplots or violin plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = as.factor(cyl), y = hwy)) + \n  geom_boxplot() +\n  scale_x_discrete(name = \"# Cylinders\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = as.factor(cyl), y = hwy)) + \n  geom_violin(scale = \"width\", draw_quantiles = c(0.25, 0.5, 0.75)) +\n  scale_x_discrete(name = \"# Cylinders\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nNote that many of these \"geom\"s have lots of options. For example, we've decided to `scale` all of the violin plots to the same width and to draw the quartiles on them (mimicking the boxplots above).\n\n### 2D Contours\n\nWe can also visualize the density of values across two continuos variables using a 2D contour. Here we'll use the built-in Old Faithful waiting time/eruption duration data (`faithful`). We'll expand the axes a little bit to better show the contours:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(faithful, aes(x = eruptions, y = waiting)) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  xlim(0.5, 6) +\n  ylim(35, 110) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Time Series\n\nWe'll use the built-in `economics` dataset to explore visualizing a time series. In this case, we are looking at unemployment over time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = date, y = unemploy)) +\n  geom_line() +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n`geom_path()` lets you explore how two variables are related over time. For example, unemployment and personal savings rate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = unemploy/pop, y = psavert)) +\n  geom_path(aes(colour = as.numeric(date))) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNote how we've used multiple columns of the data to define the x-axis here.\n\n## Combining layers\n\nWe can also combine multiple layers to show the same data in different ways in the same plot. For example, we could show the raw data for the above contour plot in addition to the contours:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(faithful, aes(x = eruptions, y = waiting)) +\n  geom_point() +\n  geom_density_2d_filled(alpha = 0.5) +\n  geom_density_2d(linewidth = 0.25, colour = \"black\") +\n  xlim(0.5, 6) +\n  ylim(35, 110) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNote that, when combining layers, the layers are added to the plot in order, so in this case the points are the bottom layer and the contour lines are the top layer. We changed the alpha of the middle layer to prevent the points from being blocked.\n\n## Facetting\n\nLet's take our scatterplot example from earlier and make it a little more complex with another aesthetic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class, shape = drv)) + \n  geom_point() +\n  scale_color_brewer(name = \"Vehicle Class\", palette = \"Set1\") +\n  scale_shape_discrete(name = \"Drive Type\") +\n  scale_x_continuous(name = \"Engine Displacement (l)\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nNow, what if we wanted to also split the data by the years the cars were manufactured? We're already using color and shape, so what other aesthetic could we use? We could possible use some shapes that have both a fill and outline color, but that sounds messy. Instead of using another aesthetic, we could also use a `facet`. This splits the chart into multiple panels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class, shape = drv)) + \n  geom_point() +\n  scale_color_brewer(name = \"Vehicle Class\", palette = \"Set1\") +\n  scale_shape_discrete(name = \"Drive Type\") +\n  scale_x_continuous(name = \"Engine Displacement (l)\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  facet_wrap(vars(year)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nWe can get even crazier by faceting by multiple variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy, color = class, shape = drv)) + \n  geom_point() +\n  scale_color_brewer(name = \"Vehicle Class\", palette = \"Set1\") +\n  scale_shape_discrete(name = \"Drive Type\") +\n  scale_x_continuous(name = \"Engine Displacement (l)\") +\n  scale_y_continuous(name = \"Highway Mileage (mpg)\") +\n  facet_grid(rows = vars(cyl), cols = vars(year)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nOK, maybe we've gone a little too far here, but you get the picture!\n\n# Visualizing paleo data\n\nNow let's take a stab at visualizing some paleo data! First, let's load and prepare the packages we are going to need.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palaeoverse) # for data\nlibrary(ggplot2) # for plots\nlibrary(deeptime) # for fun plot additions\n```\n:::\n\n\nNow let's prepare our reef data like we learned before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign a common time scale based on an interval key\ndata(reefs)\nreefs <- look_up(occdf = reefs,\n                 early_interval = \"interval\",\n                 late_interval = \"interval\",\n                 int_key = interval_key)\n# Remove pre-Phanerozoic data to focus our study\nreefs <- subset(reefs, interval_max_ma <= 541)\n# Extract Phanerozoic stage-level stages for time bins\nbins <- time_bins(interval = \"Phanerozoic\", rank = \"stage\")\n# bin_time requires \"max_ma\" and \"min_ma\" columns\ncolnames(reefs)[which(colnames(reefs) == \"interval_max_ma\")] <- \"max_ma\"\ncolnames(reefs)[which(colnames(reefs) == \"interval_min_ma\")] <- \"min_ma\"\nreefs <- bin_time(occdf = reefs, bins = bins, method = \"all\")\n# Bin occurrence data\nreefs_time <- group_apply(occdf = reefs, group = c(\"bin_assignment\", \"bin_midpoint\"), fun = nrow)\n# Clean these columns up\nreefs_time$bin_assignment <- as.numeric(reefs_time$bin_assignment)\nreefs_time$bin_midpoint <- as.numeric(reefs_time$bin_midpoint)\n# Check output\nhead(reefs_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nrow bin_assignment bin_midpoint\n1    3            102      0.00210\n2    3            101      0.00620\n3    3            100      0.00995\n4  117             99      0.07035\n5   52             98      0.45150\n6   34             97      1.28700\n```\n\n\n:::\n:::\n\n\nIn the previous practical you plotted this data using base R graphics. Now we'll do the same but using `ggplot2`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(reefs_time, aes(x = bin_midpoint, y = nrow)) +\n  geom_line() +\n  scale_x_reverse(\"Time (Ma)\", limits = c(541, 0), expand = expansion(0, 0)) +\n  scale_y_continuous(\"Number of reefs per stage\") +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Timescales\n\nThe [`deeptime`](https://williamgearty.com/deeptime/index.html) package allows us to add a timescale to a `ggplot2` plot with a single line (just like `palaeoverse` does in base R graphics). `coord_geo()` is one of many [coordinate systems](https://ggplot2.tidyverse.org/articles/ggplot2.html#coordinates) that exist in the `ggplot2` ecosystems. Often coordinate systems are used to alter the positions of aesthetics, but in this case `coord_geo()` adds a timescale to one or more of the axes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(reefs_time, aes(x = bin_midpoint, y = nrow)) +\n  geom_line() +\n  scale_x_reverse(\"Time (Ma)\") +\n  scale_y_continuous(\"Number of reefs per stage\") +\n  coord_geo(xlim = c(541, 0)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nWe can stack multiple timescales or have timescales on multiple sides:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(reefs_time, aes(x = bin_midpoint, y = nrow)) +\n  geom_line() +\n  scale_x_reverse(\"Time (Ma)\") +\n  scale_y_continuous(\"Number of reefs per stage\") +\n  coord_geo(\n    dat = list(\"periods\", \"eras\"), xlim = c(542, 0),\n    pos = list(\"b\", \"b\"), abbrv = list(TRUE, FALSE)\n  ) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(reefs_time, aes(x = bin_midpoint, y = nrow)) +\n  geom_line() +\n  scale_x_reverse(\"Time (Ma)\") +\n  scale_y_continuous(\"Number of reefs per stage\") +\n  coord_geo(\n    dat = list(\"periods\", \"eras\"), xlim = c(542, 0),\n    pos = list(\"b\", \"t\"), abbrv = list(TRUE, FALSE)\n  ) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### Timescale color palettes\n\nInstead of a line graph/time series, we could plot these reef counts as a bar graph (`geom_col()` in this case). However, to give a little more life to our graph, we'll go ahead and color each bar based on the official geological timescale color palette (included in `deeptime`). First we need to get the stage names and the beginnings and ends of the bins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get stage names\nreefs_time$stage <- bins$interval_name[reefs_time$bin_assignment]\n\n# Get beginning and end of bins\nreefs_time$bin_max_ma <- bins$max_ma[reefs_time$bin_assignment]\nreefs_time$bin_min_ma <- bins$min_ma[reefs_time$bin_assignment]\n```\n:::\n\n\nThen we can go ahead and make the desired bar graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(reefs_time, aes(x = bin_midpoint, y = nrow, fill = stage)) +\n  geom_col(aes(width = bin_max_ma - bin_min_ma)) +\n  scale_x_reverse(\"Time (Ma)\") +\n  scale_y_continuous(\"Number of reefs per stage\") +\n  scale_fill_geo(dat = \"stages\", guide = \"none\") +\n  coord_geo(xlim = c(541, 0)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\nWe could also group the stages by era and color them based on that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreefs_time$era <- cut(reefs_time$bin_midpoint,\n                      breaks = c(0, 66, 252, 542),\n                      labels = c(\"Cenozoic\", \"Mesozoic\", \"Paleozoic\"))\n\nggplot(reefs_time, aes(x = bin_midpoint, y = nrow, fill = era)) +\n  geom_col(aes(width = bin_max_ma - bin_min_ma)) +\n  scale_x_reverse(\"Time (Ma)\") +\n  scale_y_continuous(\"Number of reefs per stage\") +\n  scale_fill_geo(dat = \"eras\", guide = \"none\") +\n  coord_geo(xlim = c(541, 0)) +\n  theme_classic() +\n  theme(axis.text = element_text(color = \"black\"))\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n## Plot occurrences through time\n\nA common graph in paleontology is stratigraphic occurrences of taxa through time. The `palaeoverse` and `deeptime` packages have functions to instantly create graphs like these based on occurrence data. I'll focus on the `deeptime` version here since it uses `ggplot2`. First we'll grab some tetrapod occurrence data from the `palaeoverse` package and clean it up a little:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noccdf <- subset(tetrapods, accepted_rank == \"genus\")\noccdf <- subset(occdf, select = c(occurrence_no, accepted_name,\n                                  max_ma, min_ma))\noccdf$age <- (occdf$max_ma + occdf$min_ma) / 2\noccdf <- subset(occdf, accepted_name %in% c(\"Eryops\", \"Dimetrodon\",\n                                            \"Diadectes\", \"Diictodon\",\n                                            \"Ophiacodon\", \"Diplocaulus\",\n                                            \"Benthosuchus\"))\n```\n:::\n\n\nNow we'll use `geom_points_range()` to plot the occurrences as points and ranges:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot those occurrences\nggplot(data = occdf) +\n  geom_points_range(aes(x = age, y = accepted_name)) +\n  scale_x_reverse(name = \"Time (Ma)\") +\n  coord_geo(pos = list(\"bottom\", \"bottom\"),\n            dat = list(\"stages\", \"periods\"),\n            abbrv = list(TRUE, FALSE), expand = TRUE, size = \"auto\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](practical-ggplot2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nAnd that's that!\n",
    "supporting": [
      "practical-ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}