{
  "hash": "8aafb882aa84de589b929aae0aca5dc8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Latitudinal trends in Phanerozoic reefs\"\nexecute:\n  echo: true\n  eval: true\n  freeze: true\norder: 3\n---\n\n# Introduction\n\n`palaeoverse` is an R package developed by palaeobiologists, for palaeobiologists. The aim of the package is to generate a community-driven toolkit of generic functions for the palaeobiological community. The package does not provide implementations of statistical analyses, rather it provides auxiliary functions to help streamline analyses and improve code readability and reproducibility. This tutorial is provided to guide you through the installation process and some of the functionality available within `palaeoverse`. To do so, we will focus on a usage example looking at latitudinal trends in Phanerozoic reefs.\n\n## Installation\n\nThe `palaeoverse` package can be installed via CRAN or its dedicated [GitHub repository](https://github.com/palaeoverse-community/palaeoverse) if the development version is preferred. To install via the CRAN, simply use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palaeoverse\")\n```\n:::\n\n\nTo install the development version, first install the `devtools` package, and then use `install_github` to install `palaeoverse` directly from GitHub.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"palaeoverse/palaeoverse\")\n```\n:::\n\n\nYou can now load `palaeoverse` using the default `library` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palaeoverse)\n```\n:::\n\n\n**Before we get onto the good stuff, the development team has a small request**. If you use `palaeoverse` in your research, please cite the associated publication. This will help us to continue our work in supporting you to do yours. You can access the appropriate citation via:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncitation(\"palaeoverse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTo cite palaeoverse in publications, use the following citation:\n\n  Jones, L.A., Gearty, W., Allen, B.J., Eichenseer, K., Dean, C.D.,\n  Galván S., Kouvari, M., Godoy, P.L., Nicholl, C.S.C., Dillon, E.M.,\n  Flannery-Sutherland, J.T., Chiarenza, A.A. 2023. palaeoverse: A\n  community-driven R package to support palaeobiological analysis.\n  Methods in Ecology and Evolution. 14(9), 2205--2215. doi:\n  10.1111/2041-210X.14099\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {palaeoverse: A community-driven R package to support palaeobiological analysis},\n    author = {Lewis A. Jones and William Gearty and Bethany J. Allen and Kilian Eichenseer and Christopher D. Dean and Sofía Galván and Miranta Kouvari and Pedro L. Godoy and Cecily S. C. Nicholl and Lucas Buffan and Erin M. Dillon and Joseph T. Flannery-Sutherland and Alfio Alessandro Chiarenza},\n    year = {2023},\n    journal = {Methods in Ecology and Evolution},\n    volume = {14(9)},\n    pages = {2205--2215},\n    doi = {10.1111/2041-210X.14099},\n  }\n```\n\n\n:::\n:::\n\n\n## Using the package\n\nFunctions in `palaeoverse` are designed around the assumption that most users' data are stored in an occurrence `data.frame`. As such, this is the expected input data format for most functions. We provide two example occurrence datasets (`tetrapods` and `reefs`) within the package from different data sources. In this vignette, we will focus on the `reefs` dataset which is a compilation of Phanerozoic reef occurrences (*n* = 4,363) from the [PaleoReefs Database](https://www.paleo-reefs.pal.uni-erlangen.de) (Kiessling & Krause, 2022).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the dataset\ndata(reefs)\n# View the first five rows & columns of reefs\nreefs[1:5, 1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  r_number               name             formation   system         series\n1        1   Tilkideligi Tepe                       Triassic Upper Triassic\n2        2              Hydra Pantokrator Limestone Triassic Upper Triassic\n3        3 Shiraho, W-Pacific                        Neogene       Holocene\n4        4 Aksu-Terziler area                       Triassic Upper Triassic\n5        5    Adnet, Salzburg                       Triassic Upper Triassic\n```\n\n\n:::\n:::\n\n\n*Note the structure of the dataset. Each row contains a unique occurrence and each column contains a unique variable.*\n\n# Let's begin!\n\nReefs have long been considered good tracers of past tropical and subtropical conditions (Kiessling, 2001; Perrin & Kiessling, 2010). More specifically, their distribution has historically been used to infer the latitudinal extent of tropical and subtropical climatic conditions in deep time. This is of course an oversimplification given all we know about modern reefs systems and their engineers. However, for the purpose of this example, let's not get weighed down by the finer details.\n\nIn this example, we will use the `reefs` dataset to examine latitudinal trends in Phanerozoic reefs and demonstrate some of the functionality available in `palaeoverse`.\n\nLet's start by exploring the dataset. Before conducting any analyses, it is always a good idea to explore your data and understand what you are working with. Details related to the example datasets can be accessed via the usual documentation call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Call documentation for dataset\n?reefs\n# You can also use\nhelp(reefs)\n```\n:::\n\n\nLet's start by exploring the data a little:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many reefs are there in the dataset?\n# Each row represents an individual reef.\nnrow(reefs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4363\n```\n\n\n:::\n:::\n\n\nNot bad (*n* = 4363), that's quite a bit of data to play with! Remember that these are reefs (whole ecosystems), not individual occurrences of fossil organisms like in `tetrapods`. But how much does this vary across time? We can make use of the `group_apply` wrapper function to run a function across subsets of data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many reefs per interval?\n# Let's group by the interval column to test\nreef_counts <- group_apply(occdf = reefs, group = \"interval\", fun = nrow)\nhead(reef_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nrow                interval\n1    2       (early?) Toarcian\n2    1       Aalenian-Bajocian\n3    4       Aalenian/Bajocian\n4    1 Aalenian/lower Bajocian\n5    1               Abadehian\n6    6                Aeronian\n```\n\n\n:::\n:::\n\n\nOh dear, we've just hit a common issue... our reef data does not conform to a common time scale! Some reefs are resolved to stage level, while others are resolved to a coarser or finer temporal resolution. In some instances, regional names are also used, while international names are used in others. This makes it challenging to make comparisons through time... one solution could be to use age values to bin the reefs into time bins, but no age range data is provided in the dataset (i.e. \"max_ma\" and \"min_ma\"). We must therefore use the names of each interval to link to a common time scale, the '[International Geological Stages](https://stratigraphy.org/chart)' established by the International Commission on Stratigraphy (ICS). Fortunately, we can make use of the `look_up` function to do so. This function can be used to assign international geological stages and numeric ages to occurrences, or use a user-defined interval key to link to a common time scale. Here, we will use the example `interval_key` available in `palaeoverse` to assign international geological stage names and numeric ages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the interval key\ndata(\"interval_key\")\n# Assign a common time scale based on an interval key\nreefs <- look_up(occdf = reefs,\n                 early_interval = \"interval\",\n                 late_interval = \"interval\",\n                 int_key = interval_key)\n# Example output\nreefs[100:110, 15:19]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    early_stage late_stage interval_max_ma interval_mid_ma interval_min_ma\n100    Ladinian    Carnian           242.0          234.50           227.0\n101      Norian     Norian           227.0          217.75           208.5\n102    Rhaetian   Rhaetian           208.5          204.90           201.3\n103    Ladinian    Carnian           242.0          234.50           227.0\n104      Norian   Rhaetian           227.0          214.15           201.3\n105     Anisian    Anisian           247.2          244.60           242.0\n106    Rhaetian   Rhaetian           208.5          204.90           201.3\n107  Sinemurian Sinemurian           199.3          195.05           190.8\n108   Oxfordian  Oxfordian           163.5          160.40           157.3\n109   Tithonian  Tithonian           152.1          148.55           145.0\n110   Tithonian  Tithonian           152.1          148.55           145.0\n```\n\n\n:::\n:::\n\n\nGreat! We now have a common time scale and numeric ages. However, some of our reefs seem to range through several stages and we can't count just by the early or late stage. Our data still need to be binned. Let's check out the `time_bins` and `bin_time` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now we have numeric ages for our data, we can easily\n# remove pre-Phanerozoic data to focus our study\nreefs <- subset(reefs, interval_max_ma <= 541)\n# Extract Phanerozoic stage-level stages for time bins\nbins <- time_bins(interval = \"Phanerozoic\", rank = \"stage\")\n# Bin data\n# bin_time requires \"max_ma\" and \"min_ma\" columns\n# Rename columns in reefs\ncolnames(reefs)[which(colnames(reefs) == \"interval_max_ma\")] <- \"max_ma\"\ncolnames(reefs)[which(colnames(reefs) == \"interval_min_ma\")] <- \"min_ma\"\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Five methods exist in bin_time for binning occurrence data\n# You can see details on each via ?bin_time\n# Bin by midpoint age\nbin_time(occdf = reefs, bins = bins, method = \"mid\")\n# Bin by overlap majority\nbin_time(occdf = reefs, bins = bins, method = \"majority\")\n# Bin into every bin within age range\nbin_time(occdf = reefs, bins = bins, method = \"all\")\n# Bin randomly into bins within age range (equal probability)\nbin_time(occdf = reefs, bins = bins, method = \"random\", reps = 10)\n# Bin randomly into bins within age range (uniform probability)\nbin_time(occdf = reefs, bins = bins, method = \"point\", reps = 10)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's go with \"all\" for this example!\nreefs <- bin_time(occdf = reefs, bins = bins, method = \"all\")\n```\n:::\n\n\nNote that the number of rows of `reefs` have now increased. This is because the \"all\" method in `bin_time` duplicates an occurrence for every bin the age range overlaps with.\n\nLet's check those reef numbers through time again using our binned data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count number of occurrences per interval\nreefs_time <- group_apply(occdf = reefs, group = \"bin_midpoint\", fun = nrow)\n# Check output\nhead(reefs_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nrow bin_midpoint\n1    3       0.0021\n2    3       0.0062\n3    3      0.00995\n4  117      0.07035\n5   52       0.4515\n6   34        1.287\n```\n\n\n:::\n:::\n\n\nThat's more like it! But, let's not forget it's always useful to visualise our data. Why don't we plot the number of reefs through time? We can even make use of the `axis_geo` function to add the Geological Time Scale to our plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot data\nplot(x = reefs_time$bin_midpoint,\n     y = reefs_time$nrow,\n     xlab = \"Time (Ma)\",\n     ylab = \"Number of reefs per stage\",\n     xlim = c(541, 0),\n     xaxt = \"n\",\n     type = \"b\", pch = 20)\n# Add axis of the geological time scale\naxis_geo(side = 1, intervals = \"periods\")\n```\n\n::: {.cell-output-display}\n![](phanerozoic-reefs_files/figure-html/plotcounts-1.png){width=672}\n:::\n:::\n\n\nYou would (and should) of course want to explore your data a little more than this. However, for the sake of brevity, let's focus on our research theme: latitudinal trends in Phanerozoic reefs.\n\nWhen studying modern latitudinal trends (e.g. in biodiversity), researchers can use the geographic coordinates of their samples to conduct analyses. However, as the continents shift through time, palaeobiologists must reconstruct the palaeogeographic coordinates of fossil localities. To do so, Global Plate Models are used (e.g. the PALEOMAP model) to rotate the modern coordinates of fossil localities to their location at time of deposition. The `palaeorotate` function allows the user to do so using either the 'point' or 'grid' method. The first approach makes use of the GPlates Web Service and allows point data to be rotated to specific ages using the available models (see <https://gwsdoc.gplates.org>). The second approach uses reconstruction files of pre-generated palaeocoordinates to spatiotemporally link occurrences' modern coordinates and age estimates with their respective palaeocoordinates. Let's give it a shot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Palaeorotate occurrences\nreefs <- palaeorotate(occdf = reefs, age = \"bin_midpoint\",\n                      method = \"point\", model = \"PALEOMAP\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check palaeocoordinates\nhead(reefs[, c(\"p_lng\", \"p_lat\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    p_lng   p_lat\n1 21.3630 10.0755\n2 22.1341  2.3106\n3      NA      NA\n4      NA      NA\n5      NA      NA\n6 26.3041 -0.3093\n```\n\n\n:::\n:::\n\n\nNow let's plot that palaeolatitudinal distribution!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot data\nplot(x = reefs$bin_midpoint,\n     y = reefs$p_lat,\n     xlab = \"Time (Ma)\",\n     ylab = \"Palaeolatitude (\\u00B0)\",\n     xlim = c(541, 0),\n     xaxt = \"n\",\n     type = \"p\", pch = 20)\naxis_geo(side = 1, intervals = \"periods\")\n```\n\n::: {.cell-output-display}\n![](phanerozoic-reefs_files/figure-html/plotplat-1.png){width=672}\n:::\n:::\n\n\nNeat! But it's hard to draw any trends from this data (there is a lot of it!). We can do better... let's summarise this information... if we assume that reefs are broadly limited to tropical and subtropical climatic conditions, the most poleward reef in each time bin should give us an estimate of the palaeolatitudinal extent of these climatic conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's first assume hemispheric symmetry and convert\n# palaeolatitudes to absolute palaeolatitudes\nreefs$p_lat <- abs(reefs$p_lat)\n# Now we can calculate the most poleward latitude per time bin\n# Extract unique interval midpoints\nmidpoints <- sort(unique(reefs$bin_midpoint))\n# Calculate the maximum palaeolatitude for each time bin\nreefs_max <- sapply(X = midpoints, FUN = function(x) {\n  max(reefs[which(reefs$bin_midpoint == x), ]$p_lat, na.rm = TRUE)\n} )\n# Plot data\nplot(x = midpoints,\n     y = reefs_max,\n     xlab = \"Time (Ma)\",\n     ylab = \"Palaeolatitude (\\u00B0)\",\n     xlim = c(541, 0),\n     xaxt = \"n\",\n     type = \"b\",\n     pch = 20)\n# Add axis of the geological time scale\naxis_geo(side = 1, intervals = \"periods\")\n```\n\n::: {.cell-output-display}\n![](phanerozoic-reefs_files/figure-html/plotmaxlat-1.png){width=672}\n:::\n:::\n\n\nThat's definitely much clearer! Should we stop there? Well... how about one last thing... let's consider how Global Plate Model choice might impact these results using three different models: GOLONKA, PALEOMAP, and MERDITH2021 (Wright et al. 2013; Scotese & Wright, 2018; Merdith et al. 2021).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can call multiple models at once with palaeorotate\n# First, let's define the models...\nmodels <- c(\"GOLONKA\", \"PALEOMAP\", \"MERDITH2021\")\n# And now palaeorotate!\nreefs <- palaeorotate(occdf = reefs, age = \"bin_midpoint\",\n                      method = \"point\", model = models)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check palaeocoordinates\n# When multiple models are called, the name of the model\n# is added as a suffix to p_lng and p_lat\nhead(reefs[, c(\"p_lng_PALEOMAP\", \"p_lat_PALEOMAP\",\n               \"p_lng_GOLONKA\", \"p_lat_GOLONKA\",\n               \"p_lng_MERDITH2021\", \"p_lat_MERDITH2021\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  p_lng_PALEOMAP p_lat_PALEOMAP p_lng_GOLONKA p_lat_GOLONKA p_lng_MERDITH2021\n1        21.3630        10.0755       35.6565        8.3384           34.4223\n2        22.1341         2.3106       31.0982        4.8069           30.8863\n3             NA             NA      124.2500       24.3330          124.2489\n4             NA             NA      124.2500       24.3330          124.2493\n5             NA             NA      124.2500       24.3330          124.2498\n6        26.3041        -0.3093       38.0979        4.9270           36.3998\n  p_lat_MERDITH2021\n1           12.1964\n2            4.7404\n3           24.3367\n4           24.3352\n5           24.3337\n6            4.5809\n```\n\n\n:::\n:::\n\n\nNow we've palaeorotated our data, let's repeat what we did earlier and calculate the most poleward reef occurrence for each model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's code a little helper function to begin with.\n# This is generally useful when repeating code several times!\np_lat_max <- function(occdf, midpoint, p_lat) {\n  # Get absolute palaeolatitudes\n  occdf[, p_lat] <- abs(occdf[, p_lat])\n  # Extract unique bin midpoints\n  midpoints <- sort(unique(occdf[, midpoint]))\n  # Calculate maximum palaeolatitude for each bin\n  lat_max <- sapply(X = midpoints, FUN = function(x) {\n    max(occdf[which(occdf[, midpoint] == x), ][, p_lat], na.rm = TRUE)\n  })\n  # Bind data\n  lat_max <- cbind.data.frame(midpoints, lat_max)\n  # Return df\n  return(lat_max)\n}\n# Calculate maximum palaeolatitude of reefs for each time bin for each model\npaleomap <- p_lat_max(occdf = reefs,\n                      midpoint = \"bin_midpoint\",\n                      p_lat = \"p_lat_PALEOMAP\")\ngolonka <- p_lat_max(occdf = reefs,\n                     midpoint = \"bin_midpoint\",\n                     p_lat = \"p_lat_GOLONKA\")\nmerdith <- p_lat_max(occdf = reefs,\n                     midpoint = \"bin_midpoint\",\n                     p_lat = \"p_lat_MERDITH2021\")\n# Set up plot\nplot(x = NULL,\n     y = NULL,\n     xlab = \"Time (Ma)\",\n     ylab = \"Palaeolatitude (\\u00B0)\",\n     xlim = c(541, 0),\n     ylim = c(0, 90),\n     xaxt = \"n\")\n# Plot maximum palaeolatitudes for each model\nlines(x = paleomap$midpoints, y = paleomap$lat_max,\n      type = \"o\", col = \"#e41a1c\", pch = 15)\nlines(x = golonka$midpoints, y = golonka$lat_max,\n      type = \"o\", col = \"#377eb8\", pch = 16)\nlines(x = merdith$midpoints, y = merdith$lat_max,\n      type = \"o\", col = \"#4daf4a\", pch = 17)\n# Add legend\nlegend(530, 20, legend=c(\"PALEOMAP\", \"GOLONKA\", \"MERDITH2021\"),\n       col = c(\"#e41a1c\", \"#377eb8\", \"#4daf4a\"),\n       lty = 1, pch = c(15, 16, 17), bty = \"n\")\n# Add geological time scale axis\naxis_geo(side = 1, intervals = \"periods\")\n```\n\n::: {.cell-output-display}\n![](phanerozoic-reefs_files/figure-html/maxplat-1.png){width=672}\n:::\n:::\n\n\nWe will leave you to make your own conclusions...\n\nHopefully this vignette has shown you the potential uses for `palaeoverse` functions and helped provide a workflow for your own analyses. If you have any questions about the package or its functionality, please feel free to join our [Google Group](https://groups.google.com/g/palaeoverse) and leave a question; we'll aim to answer it as soon as possible!\n\n# References\n\nKiessling, W. (2001). Paleoclimatic significance of Phanerozoic reefs. Geology 29, 751–754.\n\nKiessling, W. & Krause, M. C. (2022). PaleoReefs Database (PARED) (1.0) Data set. DOI: 10.5281/zenodo.6037852.\n\nMerdith, A., Williams, S.E., Collins, A.S., Tetley, M.G., Mulder, J.A., Blades, M.L., Young, A., Armistead, S.E., Cannon, J., Zahirovic, S., Müller. R.D. (2021). Extending full-plate tectonic models into deep time: Linking the Neoproterozoic and the Phanerozoic. Earth-Science Reviews, 214(103477). DOI: 10.1016/j.earscirev.2020.103477.\n\nPerrin, C. & Kiessling, W. (2010) Latitudinal trends in Cenozoic reef patterns and their relationship to climate. Carbonate Syst. Oligocene–Miocene Clim. Transit. 17–33.\n\nScotese, C., & Wright, N. M. (2018). PALEOMAP Paleodigital Elevation Models (PaleoDEMs) for the Phanerozoic. [PALEOMAP Project](https://www.earthbyte.org/paleodem-resource-scotese-and-wright-2018/).\n\nWright, N., Zahirovic, S., Müller, R. D., & Seton, M. (2013). Towards community-driven paleogeographic reconstructions: integrating open-access paleogeographic and paleobiology data with plate tectonics. Biogeosciences, 10(3), 1529-1541. DOI: 10.5194/bg-10-1529-2013.\n",
    "supporting": [
      "phanerozoic-reefs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}