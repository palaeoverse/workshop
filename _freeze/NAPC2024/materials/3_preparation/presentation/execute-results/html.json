{
  "hash": "07e2a1befdc7c579c30528008e383978",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: | \n  Introduction to palaeoverse\nsubtitle: |\n  **A community-driven R package**\\\n  By Lewis A. Jones\\\n  \\\n  ![](images/NAPC.png){fig-align=\"center\" height=150}\\\n  North American Paleontological Convention 2024\nauthor: | \n  [Lewis A. Jones](mailto:LewisAlan.Jones@uvigo.es), Universidade de Vigo\n  \n  ![](images/mapas.png){fig-align=\"center\" height=80}\naffiliation: \"Universidade de Vigo\"\nexecute:\n  echo: true\n  eval: true\n  freeze: true\nformat: \n  revealjs:\n    logo: \"images/logo.png\"\n    footer: \"[palaeoverse: A community-driven R package](https://palaeoverse.org) - [North American Paleontological Convention 2024](https://sites.lsa.umich.edu/napc2024/)\"\n    theme: [default, custom.scss]\n    embed-resources: true\n    output-file: \"presentation.html\"\norder: 2\n---\n\n## Development team {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n-   [Lewis A. Jones](mailto:LewisAlan.Jones@uvigo.es), Universidade de Vigo\n-   [William Gearty](mailto:willgearty@gmail.com), American Museum of Natural History\n-   [Bethany J. Allen](mailto:Bethany.Allen@bsse.ethz.ch), ETH Z√ºrich\n-   [Kilian Eichenseer](mailto:kilian.eichenseer@gmail.com), University of Durham\n-   [Christopher D. Dean](christopherdaviddean@gmail.com), University College London\n-   [Sof√≠a Galv√°n](mailto:sofia.galvan@uvigo.es), Universidade de Vigo\n-   [Miranta Kouvari](mailto:kouvari.miranta@gmail.com), University College London\n:::\n\n::: {.column width=\"50%\"}\n-   [Pedro L. Godoy](mailto:pedrolorenagodoy@gmail.com), University of S√£o Paulo\n-   [Cecily Nicholl](cecily.nicholl@ucl.ac.uk), University College London\n-   [Lucas Buffan](mailto:lucas.buffan@ens-lyon.fr), √âcole Normale Sup√©rieure de Lyon\n-   [Erin M. Dillon](mailto:erinmdillon@ucsb.edu), Smithsonian Tropical Research Institute\n-   [Alfio A. Chiarenza](mailto:a.chiarenza15@gmail.com), Universidade de Vigo\n:::\n:::\n\n::: notes\nBefore I jump into the presentation, I wanted to first note that the development of the palaeoverse R package was by no means a solo-effort. All of these fantastic people had a hand in getting it together and form the core team behind the Palaeoverse project.\n:::\n\n# Introduction {.smaller}\n\n*The long and the short of it* üìè*...*\n\n## What is Palaeoverse?\n\n<br>\n\n<br>\n\n<center>\n\n*Palaeoverse is a project that aims to **bring the palaeobiology community together.***\n\n![](images/hands.png){fig-align=\"center\" height=\"150\"}\n\n</center>\n\n::: notes\nSo, what exactly is palaeoverse? Well, the Palaeoverse project aims to bring the palaeobiology community together through various means. The overall intention is to encourage the field to work more closely together rather than in competition. We believe this to be a critical step in improving research as a working environment, but also for the progress of the field.\n:::\n\n## What is the palaeoverse R package? {.smaller}\n\n<center>\n\n![](images/claddis.jpeg){fig-align=\"center\" height=\"200\"} ![](images/divdyn.png){fig-align=\"center\" height=\"200\"}\n\n**palaeoverse** provides auxiliary functions to support data preparation and exploration.\n\n![](images/logo.png){fig-align=\"center\" height=\"200\"}\n\n*Improve code readability, reusability and reproducibility.*\n\n</center>\n\n::: notes\nOne such effort on this front is the palaeoverse R package.\n\nR and R packages are an integral part of quantitative research in palaeobiology today, with R code frequently used for data cleaning, analyses, and data visualisation. In palaeobiology, these tools are frequently borrowed or repurposed from ecology (e.g. vegan and iNEXT). While packages exist to support fossil data analyses (e.g. claddis and divDyn), there is a lack of packages to support fossil data preparation or exploration. This results in the community often producing their own custom scripts.\n\nThe palaeoverse package provides auxiliary functions to support data preparation and exploration, with the intention of improving code readability, reusability, and reproducibility.\n:::\n\n## What makes palaeoverse different? {.smaller}\n\n![](images/another-r-package.jpg){fig-align=\"center\" height=\"500\"}\n\n::: notes\nSo, just another R package?\n:::\n\n## What makes palaeoverse different? {.smaller}\n\n-   **Community-informed development**\n    -   Authors (*n* = 13)\n    -   Survey participants (*n* = 35)\n\n::: fragment\n-   **Well-documented & peer-reviewed code**\n    -   Formal review process\n:::\n\n::: fragment\n-   **A community-driven package**\n    -   <http://palaeoverse.palaeoverse.org> ![](images/chris-pratt.jpg){.absolute top=\"80\" right=\"30\" width=\"480\" height=\"300\"}\n:::\n\n::: notes\nNot quite, the idea behind palaeoverse is a little different.\n\nFor the development of the package, we formulated a large working group, and conducted an online survey, to combine our experience and perspectives with that of the community to deduce what tools were needed.\n\nAs part of the development of the package, we also established a formal review process for both code and documentation.\n\nFinally, palaeoverse is envisioned as a community package. While the initial package has been released by development team, we hope that over time, we will gain contributions from the community to broaden functionality. To support this goal, we have established several resources including a guide to contribution over at our website.\n:::\n\n# Functionality\n\n*A whistle-stop tour of palaeoverse* üöã*...*\n\n## What's available? {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n-   `axis_geo`\n-   `bin_lat`\n-   `bin_time`\n-   `data`\n-   `group_apply`\n-   `lat_bins`\n-   `look_up`\n-   `palaeorotate`\n-   `phylo_check`\n:::\n\n::: {.column width=\"50%\"}\n-   `tax_check`\n-   `tax_expand_lat`\n-   `tax_expand_time`\n-   `tax_range_space`\n-   `tax_range_time`\n-   `tax_range_strat`\n-   `tax_unique`\n-   `time_bins`\n:::\n:::\n\n::: notes\nCurrently, 15 different functions are available in palaeoverse, plus some example and reference datasets.\n:::\n\n## Expected input {.smaller}\n\nA lot of data, a lot of sources, and a lot of unique features.\n\n![](images/gbdb.png){.absolute top=\"150\" left=\"0\" width=\"150\" height=\"150\"}\n![](images/pbdb.png){.absolute top=\"150\" left=\"200\" width=\"150\" height=\"150\"}\n![](images/pared.png){.absolute top=\"150\" left=\"380\" width=\"240\" height=\"150\"}\n![](images/neotoma.png){.absolute top=\"150\" left=\"630\" width=\"200\" height=\"150\"}\n![](images/neptune.png){.absolute top=\"150\" left=\"850\" width=\"200\" height=\"150\"}\n\n<br>\n\n<br>\n\n<br>\n\n<br>\n\n<br>\n\n<center>\n\n**Data structure, not source.**\n\n`occdf` $\\rightarrow$ `function(x)` $\\rightarrow$ `df`\n\nOccurrence dataframe\\*\n\n</center>\n\n::: aside\n\\*Exceptions do exist.\n:::\n\n::: notes\nFunctionality in palaeoverse was developed to be flexible and to work around the principle that most user's data would be stored in an occurrence dataframe. That is, each row represents a unique occurrence and each column represents a unique variable. The reason for focusing on data structure is that many different databases exist, each with their own list of variables and quirks. We wanted to provide a package that could be used with data from many sources, not just popular databases, such as the PBDB.\n:::\n\n# Getting started\n\n*Let's dive in ü§ø...*\n\n::: notes\nAs I've got limited time, I'll now give you a brief overview of all the functionality available in palaeoverse. I'll be happy to answer any questions at the end you might have, and I should note that we have extensive documentation available for each function covering the specifics of each.\n:::\n\n## Installation {.smaller}\n\n::: fragment\n**palaeoverse** can be installed from the CRAN using:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palaeoverse\")\n```\n:::\n\n:::\n\n<br>\n\n::: fragment\nThe development version can be installed using devtools:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"palaeoverse/palaeoverse\")\n```\n:::\n\n:::\n\n<br>\n\n::: fragment\nOnce installed, load the package in the usual manner:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palaeoverse)\n```\n:::\n\n:::\n\n::: notes\npalaeoverse is available on CRAN and can be installed using the default install.packages function. The development version can be installed using the devtools (or remotes) package. Once installed, the package can be loaded in the usual manner.\n:::\n\n## Example datasets {.smaller}\n\nTwo example occurrence datasets are available.\n\nCarboniferous--Early Triassic tetrapods (*n* = 5270, [Paleobiology Database](https://paleobiodb.org/#/)).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Get details on dataset\n?tetrapods\n# Load dataset\ndata(\"tetrapods\")\n# Available variables\ncolnames(tetrapods)\n##  [1] \"occurrence_no\"     \"collection_no\"     \"identified_name\"  \n##  [4] \"identified_rank\"   \"accepted_name\"     \"accepted_rank\"    \n##  [7] \"early_interval\"    \"late_interval\"     \"max_ma\"           \n## [10] \"min_ma\"            \"phylum\"            \"class\"            \n## [13] \"order\"             \"family\"            \"genus\"            \n## [16] \"abund_value\"       \"abund_unit\"        \"lng\"              \n## [19] \"lat\"               \"collection_name\"   \"cc\"               \n## [22] \"formation\"         \"stratgroup\"        \"member\"           \n## [25] \"zone\"              \"lithology1\"        \"environment\"      \n## [28] \"pres_mode\"         \"taxon_environment\" \"motility\"         \n## [31] \"life_habit\"        \"diet\"\n```\n:::\n\n\nPhanerozoic reef occurrences (*n* = 4363, [PaleoReefs Database](https://www.paleo-reefs.pal.uni-erlangen.de)).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Get details on dataset\n?reefs\n# Load dataset\ndata(\"reefs\")\n# Available variables\ncolnames(reefs)\n##  [1] \"r_number\"   \"name\"       \"formation\"  \"system\"     \"series\"    \n##  [6] \"interval\"   \"biota_main\" \"biota_sec\"  \"lng\"        \"lat\"       \n## [11] \"country\"    \"authors\"    \"title\"      \"year\"\n```\n:::\n\n\n::: notes\nTwo example occurrence datasets are available in palaeoverse to provide reproducible examples in the function documentation. The first provides a dataset of Carboniferous-Early Triassic Tetrapods from the Paleobiology Database. The second provides a dataset of Phanerozoic reef occurrences from the Paleoreefs Database. Note that both datasets have different variables available, but are still based around the structure of an occurrence dataframe.\n:::\n\n## Reference datasets {.smaller}\n\nTwo reference datasets are available.\n\nGeological Time Scale 2012 & 2020 (Gradstein et al. 2012; 2020).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get details on dataset\n?GTS2012\n?GTS2020\n# Load dataset\ndata(\"GTS2012\")\ndata(\"GTS2020\")\n# Increase output width\noptions(width = 120)\n# Print first few rows\nhead(GTS2012, n = 3)\n##   interval_number      interval_name  rank max_ma mid_ma min_ma duration_myr  font  colour abbr\n## 1               1           Holocene stage 0.0117 0.0059 0.0000       0.0117 black #FDEDEC <NA>\n## 2               2  Upper Pleistocene stage 0.1260 0.0688 0.0117       0.1143 black #FFF2D3 <NA>\n## 3               3 Middle Pleistocene stage 0.7810 0.4535 0.1260       0.6550 black #FFF2C7 <NA>\nhead(GTS2020, n = 3)\n##   interval_number interval_name  rank max_ma  mid_ma min_ma duration_myr  font  colour abbr\n## 1               1    Meghalayan stage 0.0042 0.00210 0.0000       0.0042 black #FDEDEC <NA>\n## 2               2 Northgrippian stage 0.0082 0.00620 0.0042       0.0040 black #FDECE4 <NA>\n## 3               3  Greenlandian stage 0.0117 0.00995 0.0082       0.0035 black #FEECDB <NA>\n```\n:::\n\n\n::: notes\nTwo reference datasets are also made available to the user in palaeoverse. These are the Geological Time Scales 2012 & 2020 which are frequently used in research studies and by online databases. In palaeoverse, they are also used in several functions, which we will get on to now.\n:::\n\n## Stratigraphic time bins {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get stage-level time bins\nbins <- time_bins(interval = \"Phanerozoic\", rank = \"stage\", plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/stage-bins-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get first few rows\nhead(bins, n = 3)\n##   bin interval_name  rank max_ma mid_ma min_ma duration_myr abbr  colour  font\n## 1   1     Fortunian stage    541  535.0    529           12   Fo #99B575 black\n## 2   2       Stage 2 stage    529  525.0    521            8   S2 #A6BA80 black\n## 3   3       Stage 3 stage    521  517.5    514            7   S3 #A6C583 black\n```\n:::\n\n\n::: notes\nFirst up, we have the time bins function, which can be used to extract time bins based on the Geological Time Scale. The user can request different ranks of intervals such as stage, period, epoch, etc. The user can also call intervals based on interval names or an age range and plot the time bins if desired.\n:::\n\n## Macrostrat time bins {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get North American Land Mammal Ages\nbins <- time_bins(scale = \"North American Land Mammal Ages\", plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/NALMA-bins-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get first few rows\nhead(bins, n = 3)\n##   bin interval_name                            rank max_ma mid_ma min_ma duration_myr abbr  colour  font\n## 1   1       Puercan North American Land Mammal Ages  66.00 65.375  64.75         1.25    P #FDB469 black\n## 2   2   Torrejonian North American Land Mammal Ages  64.75 63.500  62.25         2.50   To #FEBA64 black\n## 3   3     Tiffanian North American Land Mammal Ages  62.25 59.875  57.50         4.75   Ti #FEBF6A black\n```\n:::\n\n\n::: notes\nThe user can also call time scales from Macrostrat.\n:::\n\n## Near-equal-length time bins {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get stage-level time bins\nbins <- time_bins(interval = \"Phanerozoic\", rank = \"stage\", size = 15, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/equal-bins-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get first few rows\nhead(bins, n = 3)\n##   bin max_ma mid_ma min_ma duration_myr grouping_rank                 intervals  colour  font\n## 1   1    541 535.00  529.0         12.0         stage                 Fortunian #80cdc1 black\n## 2   2    529 521.50  514.0         15.0         stage          Stage 3, Stage 2 #80cdc1 black\n## 3   3    514 507.25  500.5         13.5         stage Drumian, Wuliuan, Stage 4 #80cdc1 black\n```\n:::\n\n\n::: notes\nIn the previous slides, you probably noticed from the plots that time bins (e.g. stratigraphic stages) can be extremely uneven in duration. Previous studies have tried to circumvent this by grouping intervals together towards a target bin size to try and even out temporal duration for conducting analyses. palaeoverse provides an implementation of this that can be defined by the size argument.\n:::\n\n## Temporal occurrence binning {.smaller}\n\nFive temporal binning methods for age range data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use tetrapod example data\noccdf <- tetrapods\n\n# Get stage-level time bins\nbins <- time_bins(interval = \"Phanerozoic\", rank = \"stage\")\n\n# Assign via midpoint age of fossil occurrence data\nex1 <- bin_time(occdf = occdf, bins = bins, method = \"mid\")\n\n# Assign to all bins that age range covers\nex2 <- bin_time(occdf = occdf, bins = bins, method = \"all\")\n\n# Assign via majority overlap based on fossil occurrence age range\nex3 <- bin_time(occdf = occdf, bins = bins, method = \"majority\")\n\n# Randomly assign to overlapping bins based on fossil occurrence age range\nex4 <- bin_time(occdf = occdf, bins = bins, method = \"random\", reps = 10)\n\n# Randomly assign point estimates (e.g. uniform distribution) based on fossil occurrence age range\nex5 <- bin_time(occdf = occdf, bins = bins, method = \"point\", reps = 10)\n```\n:::\n\n\n::: notes\nFossil occurrences are usually provided with an age range (a minimum and maximum possible age), which is used to bin occurrences into time bins. palaeoverse provides functionality for five of the most common methods in the literature.\n\nThe first method uses the midpoint age of the fossil occurrence to bin the occurrence.\n\nThe second method bins the occurrence into every bin the age range covers.\n\nThe third method bins the occurrence into the bin the majority of the age range covers.\n\nThe fourth method bins the occurrence randomly into bins the age range overlaps with.\n\nThe fifth method assigns a point age estimates to the occurrence, which is sampled from a uniform distribution defined by the occurrence age range, and bins the occurrence.\n:::\n\n## Latitudinal occurrence binning {.smaller}\n\nGenerate and bin latitudinal data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Generate latitudinal bins\nbins <- lat_bins(size = 10, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/lat-bin-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use reef example data\noccdf <- reefs\n# Bin occurrences\noccdf <- bin_lat(occdf = occdf, bins = bins, lat = \"lat\")\n```\n:::\n\n\n::: notes\nAs a community, we are often interested in latitudinal analyses, such as studying the latitudinal biodiversity gradient. palaeoverse provides functionality for generating latitudinal bins of a given size, and binning those occurrences into the respective bins.\n:::\n\n## Spatial occurrence binning {.smaller}\n\nGenerate and bin spatial data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get reef data\noccdf <- reefs[1:500, ]\n# Bin data using a hexagonal equal-area grid\noccdf <- bin_space(occdf = occdf, spacing = 250, return = TRUE)\n# Plot world and grid using ggplot2\nlibrary(ggplot2)\nlibrary(rnaturalearth)\nworld <- ne_countries(scale = \"small\",returnclass = \"sf\")\nggplot() +\n  geom_sf(data = world, colour = \"black\", fill = \"lightgrey\") + \n  geom_sf(data = occdf$grid, fill = \"orange\", colour = \"black\") + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/bin-space-1.png){fig-align='center' width=65%}\n:::\n:::\n\n\n::: notes\nFunctionality is also provided to bin data spatially using a geospatial indexing system that partitions the world into equal-area hexagonal grid cells based on a given spacing between cells.\n:::\n\n## Palaeogeographic reconstruction {.smaller}\n\nPalaeorotate fossil occurrences (multiple models available):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example with a few occurrences\noccdf <- data.frame(lng = c(2, -103, -66),\n                    lat = c(46, 35, -7),\n                    age = c(88, 125, 200))\n\n# Estimate palaeocoordinates using the GPlates API\nex1 <- palaeorotate(occdf = occdf, method = \"point\")\n\n# Estimate palaeocoordinates using reconstruction files\nex2 <- palaeorotate(occdf = occdf, method = \"grid\")\n\n# Estimate palaeocoordinates and uncertainty using reconstruction files\nex3 <- palaeorotate(occdf = occdf, method = \"grid\", uncertainty = TRUE)\n\n# Increase output width\noptions(width = 400)\n# Get first few rows\nhead(ex3)\n##    lng lat age   rot_model rot_age     rot_lng   rot_lat    p_lng    p_lat\n## 1    2  46  88 MERDITH2021      88    1.799344 46.416665  13.0129  37.6373\n## 2 -103  35 125 MERDITH2021     125 -102.611909 34.626954 -42.5332  35.4060\n## 3  -66  -7 200 MERDITH2021     200  -65.523249 -6.954445 -22.5235 -16.7763\n```\n:::\n\n\n::: notes\nIn order to study the past distribution of taxa, the palaeogeographic position of fossil occurrences need to be reconstructed using plate rotation models. The palaeorotate function provides two methods to reconstruct palaeocoordinates for fossil occurrences. The first method, \"point\", uses the GPlates Web Service, which estimates palaeocoordinates for point data, with eight different models available. The second method, \"grid\", uses pre-generated reconstruction files to estimate palaeocoordinates. This approach is much faster than the point method for large datasets, and also allows easy exploration. Additional functionality for the second method allows the user to calculate the palaeogeographic uncertainty in reconstructions from across the eight available models with the palaeolatitudinal range and maximum circle distance between points calculated.\n:::\n\n## Taxonomic spell check {.smaller}\n\nIdentify and count potential spelling variations of the same taxon:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# load occurrence data\ndata(\"tetrapods\")\n# Check taxon names alphabetically\nex1 <- tax_check(taxdf = tetrapods, name = \"genus\", dis = 0.05, verbose = FALSE)\n# Get first few rows\nhead(ex1)\n##   group     greater     lesser count_greater count_lesser\n## 1     D Dvinosaurus Dinosaurus            23            2\n## 2     V   Varanopus   Varanops             5            3\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Check taxon names by group\nex2 <- tax_check(taxdf = tetrapods, name = \"genus\", group = \"family\", dis = 0.05, verbose = FALSE)\n# Get first few rows\nhead(ex2)\n## NULL\n```\n:::\n\n\nIn this example dataset:\n\n-   Dinosaurus belongs to the Phthinosuchidae\n-   Dvinosaurus belongs to the Dvinosauridae\n-   Varanops belongs to the Varanopidae\n-   Varanopus belongs to the Captorhinidae\n\n::: notes\nWhen working with large occurrence datasets, errors can easily creep into data. One frequently encountered issue is spelling variations of the same taxon name. This can have undesirable consequences when calculating metrics such as taxonomic richness. The tax check function computes character string distances between taxonomic names and returns those under a user-defined dissimilarity threshold. The function can also be used within groups such as here with family. As you can see this might be appropriate in some instances. While flagged taxonomic names can be similar in spelling, taxa can belong to different families.\n:::\n\n## Unique taxa {.smaller}\n\nIdentifying unique taxa:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create dataframe\noccdf <- data.frame(species = c(\"rex\", \"aegyptiacus\", NA),\n                    genus = c(\"Tyrannosaurus\", \"Spinosaurus\", NA),\n                    family = c(\"Tyrannosauridae\", \"Spinosauridae\", \"Diplodocidae\"))\n# Retain unique taxa\ndinosaur_species <- tax_unique(occdf = occdf,\n                               species = \"species\",\n                               genus = \"genus\",\n                               family = \"family\",\n                               resolution = \"species\")\nhead(dinosaur_species)\n##            family         genus           genus_species             unique_name\n## 1   Spinosauridae   Spinosaurus Spinosaurus aegyptiacus Spinosaurus aegyptiacus\n## 2 Tyrannosauridae Tyrannosaurus       Tyrannosaurus rex       Tyrannosaurus rex\n## 3    Diplodocidae          <NA>                    <NA>     Diplodocidae indet.\n```\n:::\n\n\n::: notes\nWhen calculating taxonomic richness, palaeobiologists routinely discard occurrences not identified to their desired taxonomic resolution. For example, if studying species richness, occurrences identified to genus level or above will be discarded. The tax unique function reduces the number of occurrences being discarded by retaining fossils identified to coarser taxonomic resolutions but must represent a clade not already in the filtered dataset. As you can see in this example, Diplodocidae is retained as it evidently represents a different species from those other occurrences as it belongs to a different family.\n:::\n\n## Temporal range {.smaller}\n\nCalculate and plot temporal range of taxa:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Grab tetrapod data\noccdf <- tetrapods\n# Remove NAs\noccdf <- subset(occdf, !is.na(order))\n# Temporal range\nex <- tax_range_time(occdf = occdf, name = \"order\", plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/range-time-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n::: notes\nTwo functions exist in palaeoverse for calculating taxon ranges. The first, tax range time, can be used to calculate and plot the temporal range of taxa.\n:::\n\n## Geographic range {.smaller}\n\nFour approaches to calculate geographic range of taxa:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grab internal data\noccdf <- tetrapods\n# Remove NAs\noccdf <- subset(occdf, !is.na(genus))\n# Convex hull\nex1 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"con\")\n# Latitudinal range\nex2 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"lat\")\n# Great Circle Distance\nex3 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"gcd\")\n# Occupied grid cells\nex4 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"occ\", spacing = 250)\n# See first few rows\nhead(ex2)\n##                taxon taxon_id max_lat min_lat range_lat\n## 1           Abajudon        1 -10.624 -16.524       5.9\n## 2          Abdalodon        2 -31.925 -31.925       0.0\n## 3        Abyssomedon        3  34.776  34.776       0.0\n## 4   Acanthostomatops        4  51.000  51.000       0.0\n## 5          Acerastea        5 -24.833 -24.833       0.0\n## 6 Acerosodontosaurus        6 -24.000 -24.000       0.0\n```\n:::\n\n\n::: notes\nThe second, tax range space, calculates the geographic range of taxa. In tax range space, four different approaches are available for calculating geographic ranges: convex hull, latitudinal range, maximum great circle distance and the number of occupied equal-area grid cells.\n:::\n\n## Temporal pseudo-occurrences {.smaller}\n\nConvert range data to bin-level pseudo-occurrences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate example df\ntaxdf <- data.frame(name = c(\"A\", \"B\", \"C\"),\n                    max_age = c(150, 60, 30),\n                    min_age = c(110, 20, 0))\n# Generate pseudo-occurrences\nex1 <- tax_expand_time(taxdf = taxdf, max_ma = \"max_age\", min_ma = \"min_age\")\n# Increase output width\noptions(width = 200)\n# See first few rows\nhead(ex1)\n##   name max_age min_age   ext  orig bin interval_name  rank max_ma mid_ma min_ma duration_myr abbr  colour  font\n## 1    A     150     110 FALSE  TRUE  66     Tithonian stage  152.1 148.55  145.0          7.1   Ti #D9F1F7 black\n## 2    A     150     110 FALSE FALSE  67    Berriasian stage  145.0 142.40  139.8          5.2   Be #8CCD60 black\n## 3    A     150     110 FALSE FALSE  68   Valanginian stage  139.8 136.20  132.6          7.2   Va #99D36A black\n## 4    A     150     110 FALSE FALSE  69   Hauterivian stage  132.6 131.00  129.4          3.2   Ha #A6D975 black\n## 5    A     150     110 FALSE FALSE  70     Barremian stage  129.4 127.20  125.0          4.4 Barr #B3DF7F black\n## 6    A     150     110 FALSE FALSE  71        Aptian stage  125.0 119.00  113.0         12.0   Ap #BFE48A black\n```\n:::\n\n\n::: notes\nAs complementary to the taxonomic range functions, two functions are provided for generating pseudo-occurrences from temporal and latitudinal range data. These pseudo-occurrences serve to fill in ghost ranges, in which a taxon is presumed to be present, but no record exists.\n:::\n\n## Latitudinal pseudo-occurrences {.smaller}\n\nConvert range data to bin-level pseudo-occurrences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate latitudinal bins\nbins <- lat_bins()\n# Generate example df\ntaxdf <- data.frame(name = c(\"A\", \"B\", \"C\"),\n                    max_lat = c(60, 20, -10),\n                    min_lat = c(20, -40, -60))\n# Generate pseudo-occurrences\nex1 <- tax_expand_lat(taxdf = taxdf, bins = bins)\n# See first few rows\nhead(ex1)\n##   name max_lat min_lat bin min mid max\n## 1    A      60      20   4  50  55  60\n## 2    A      60      20   5  40  45  50\n## 3    A      60      20   6  30  35  40\n## 4    A      60      20   7  20  25  30\n## 5    B      20     -40   8  10  15  20\n## 6    B      20     -40   9   0   5  10\n```\n:::\n\n\n## Phylogeny wrangling {.smaller}\n\nCompare a list of taxonomic names to tip names in a user-provided phylogeny:\n\n::: columns\n::: {.column width=\"40%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in example tree of ceratopsians\n# from paleotree\nlibrary(paleotree)\ndata(RaiaCopesRule)\n# Set smaller margins for plotting\npar(mar = rep(0, 4))\n# Plot tree\nplot(ceratopsianTreeRaia)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/paleotree-1.png){width=100%}\n:::\n:::\n\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify list of names\ndinosaurs <- c(\"Nasutoceratops_titusi\", \n               \"Diabloceratops_eatoni\",\n               \"Zuniceratops_christopheri\",\n               \"Psittacosaurus_major\")\n\n# Table of taxon names in list, tree or both\nex1 <- phylo_check(tree = ceratopsianTreeRaia,\n                   list = dinosaurs)\n# Get first few rows\nhead(ex1)\n##                   taxon_name present_in_tree present_in_list\n## 8      Diabloceratops_eatoni            TRUE            TRUE\n## 33      Psittacosaurus_major            TRUE            TRUE\n## 38     Nasutoceratops_titusi           FALSE            TRUE\n## 39 Zuniceratops_christopheri           FALSE            TRUE\n## 1       Centrosaurus_apertus            TRUE           FALSE\n## 2  Styracosaurus_albertensis            TRUE           FALSE\n```\n:::\n\n:::\n:::\n\n::: notes\nWe don't currently have much functionality for working with phylogenies, but one function that several members of the team felt would be useful is the ability to compare a list of taxonomic names to tip names in a user-provided phylogeny. As you can, this is what the phylo_check function does. Further functionality allows the user to also trim a phylogeny based on the input list.\n:::\n\n## Interval linking {.smaller}\n\nLink and match interval names to the Geological Time Scale:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Link numeric age values\n# Create exemplary df\noccdf <- data.frame(name = c(\"A\", \"B\", \"C\"),\n                    early_interval = c(\"Maastrichtian\",\n                                       \"Campanian\",\n                                       \"Sinemurian\"),\n                    late_interval = c(\"Maastrichtian\",\n                                      \"Campanian\",\n                                      \"Bartonian\"))\n# Assign stages and numerical ages\noccdf <- look_up(occdf)\n\n## Use exemplary int_key\n# Get internal reef data\noccdf <- reefs\n# Get internal interval key\nint_key <- interval_key\n# Assign stages and numerical ages\noccdf <- look_up(occdf,\n                early_interval = \"interval\",\n                late_interval = \"interval\",\n                int_key = int_key)\n```\n:::\n\n\n::: notes\nA common difficultly faced by palaeobiologists is that temporal information associated with fossil occurrences is often asynchronous, and not directly comparable. Temporal data might be provided as either character-based interval names or numeric ages, and might conform to different timescales. The look_up function is provided to help assign a common timescale. The function can be used to generate numeric ages from GTS interval names or an interval key can be provided by the user to link interval names to the Geological Time Scale. This interval key consist of three columns with the first containing the interval name followed by the early and late international stage the interval name correlates with. Interval key is provided an example dataset in palaeoverse.\n:::\n\n## Plotting {.smaller}\n\nAdd Geological Time Scale to plots:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot data\nplot(x = 541:0,\n     xlab = \"Time (Ma)\", ylab = \"User-variable\",\n     xlim = c(541, 0), xaxt = \"n\", type = \"l\", lwd = 5)\n\n# Add Geological Time Scale\naxis_geo(side = 1, intervals = \"periods\")\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/axis-geo-1.png){fig-align='center' width=50%}\n:::\n:::\n\n\n::: notes\nA common request from our survey participants was the ability to add the Geological Time Scale to a base R plot. The axis_geo function in palaeoverse can be used to do just that.\n:::\n\n## Wrapper {.smaller}\n\nRun functions over groups of data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get tetrapod data\noccdf <- tetrapods\n\n# Count number of occurrences from each country\nex1 <- group_apply(occdf = occdf, group = \"cc\", fun = nrow)\n\n# Remove NA data\noccdf <- subset(occdf, !is.na(genus))\n\n# Unique genera per collection with group_apply and input arguments\nex2 <- group_apply(occdf = occdf,\n                   group = c(\"collection_no\"),\n                   fun = tax_unique,\n                   genus = \"genus\",\n                   family = \"family\",\n                   order = \"order\",\n                   class = \"class\",\n                   resolution = \"genus\")\n\n# Use multiple variables (number of occurrences per collection & formation)\nex3 <- group_apply(occdf = occdf,\n                   group = c(\"collection_no\", \"formation\"),\n                   fun = nrow)\n```\n:::\n\n\n::: notes\nAs with most fields, we often want to analyse our data in groups. In palaeoverse, we provide the function group_apply as a wrapper function to run functions over groups of data. For example, if we want to calculate the number of occurrences per country in this example, or use the function tax unique per collection in this example. The group apply function also allows the user to run function over multiple grouping variables, for example in the third example we calculate the number of occurrences per unique collection and geological formation combination.\n:::\n\n# What's next? {.smaller}\n\n*Onwards and upwards* üèîÔ∏è*...*\n\n::: notes\nSo, that's it on current functionality. I appreciate that was slapdash introduction to the package, but I thought it best to cover all the functions in the time I had rather than focus on a few. If you have any specific questions at the end I'd be happy to answer them and we also have quite thorough documentation for each of the functions. But for now, what's next? Onwards and upwards... we hope.\n:::\n\n## What's next? {.smaller}\n\n![](images/logo.png){.absolute top=\"50\" right=\"50\" height=\"50%\"}\n\n::: fragment\n-   Palaeobiology CRAN Task View\n:::\n\n::: fragment\n-   Shiny App\n:::\n\n::: fragment\n-   Workshops and Hackathons\n:::\n\n::: fragment\n-   Further package development\n:::\n\n::: fragment\n-   Funding\n:::\n\n::: fragment\n-   Your involvement!\n:::\n\n::: notes\nWe have quite a lot of plans going forward! The team is currently in the process of putting together a Palaeobiology CRAN Task view and has started development on a Shiny App for non-R users. We also plan to host a workshop and hackathon next September at UCL, funding depdendent. Which is something we are also actively working on now, securing funds to continue our work on this project and support its growth. Finally, we hope your involvement is what's next! If you have functions which you think would be useful for the broader palaeobiological community, please do consider submitting a pull request on the palaeoverse repository! We would also love to hear any feedback on the package you might have.\n:::\n\n## Thank-you / Merci / Gracias / Danke / Obrigado / Grazie / ŒïœÖœáŒ±œÅŒπœÉœÑœé {.smaller}\n\n![](images/logo.png){fig-align=\"center\" height=\"150\"}\n\n::: columns\n::: {.column width=\"50%\"}\n-   **Website**: General information\n    -   <https://palaeoverse.org>\n-   **Twitter**: News and updates\n    -   [\\@ThePalaeoverse](https://twitter.com/ThePalaeoverse)\n-   **Google Group**: A community space\n    -   <https://groups.google.com/g/palaeoverse>\n:::\n\n::: {.column width=\"50%\"}\n-   **Point of contact**: General contact\n    -   [LewisAlan.Jones\\@uvigo.es](mailto:LewisA.Jones@outlook.com)\n-   **Publication**: Open-access\n    -   <https://doi.org/10.1111/2041-210X.14099>\n:::\n:::\n\n::: notes\nAll that is left to say is a big thank you from myself and the development team for listening. You can find general information about the palaeoverse R package on our website, and news and updates on the project on Twitter (providing Elon Musk doesn't burn it to the ground). We have also established a Google Group to serve as a community space, which we welcome you all to join. This group is setup to act as a space to share ideas and resources, advertise opportunities, and generally network with colleagues. And a final bit of self promotion, our pre-print on palaeoverse is now available on EarthArXiv, if you wish to check it out! Thank you for listening.\n:::\n",
    "supporting": [
      "presentation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}